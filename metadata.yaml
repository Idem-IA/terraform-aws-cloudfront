# Module Metadata for AI-Assisted Architecture Generation
module:
  name: terraform-aws-cloudfront
  description: "Terraform module to create and manage AWS CloudFront distributions with support for multiple origins, cache behaviors, and security features"
  provider: aws
  category: networking
  required_providers:
    - name: aws
      source: hashicorp/aws
      version: ">= 4.0.0"

# Core Components
components:
  - name: cloudfront_distribution
    type: resource
    description: "The CloudFront distribution that delivers your content"
    required: true
    
  - name: origin_access_control
    type: resource
    description: "Manages access to S3 origins (replaces Origin Access Identity)"
    
  - name: cache_policy
    type: resource
    description: "Defines what values are included in the cache key and which headers are forwarded to the origin"

# Common Use Cases
use_cases:
  - "Accelerating static website delivery"
  - "Securing content with HTTPS and WAF"
  - "Implementing geo-restrictions"
  - "Using Lambda@Edge or CloudFront Functions for request/response manipulation"
  - "Setting up multiple origins with different caching behaviors"

# Dependencies
dependencies:
  - name: ACM
    type: security
    description: "For SSL/TLS certificates for custom domains"
    recommended_module: "git::https://github.com/Idem-modules/terraform-aws-acm.git"
  
  - name: Route53
    type: dns
    description: "For managing DNS records for custom domains"
    recommended_module: "git::https://github.com/Idem-modules/terraform-aws-route53.git"

# Integration Points
integrations:
  - name: S3
    description: "Common origin for static websites and content"
    required: false
    
  - name: ALB/EC2
    description: "Dynamic content origins"
    required: false
    
  - name: Lambda@Edge
    description: "For running custom code at CloudFront edge locations"
    required: false
    
  - name: WAF
    description: "For protecting against web exploits"
    required: false

# Performance Guidelines
performance:
  - "Use cache policies to control TTL and cache key"
  - "Enable HTTP/2 and HTTP/3 (QUIC)"
  - "Use regional edge caches for better performance"
  - "Consider using Origin Shield for origin protection and caching"

# Security Considerations
security:
  - "Enable AWS Shield Standard for DDoS protection"
  - "Use WAF to protect against web exploits"
  - "Restrict access using signed URLs or signed cookies"
  - "Enable logging and monitoring"
  - "Use field-level encryption for sensitive data"

# Example Configuration
example_configuration: |
  module "cdn" {
    source  = "git::https://github.com/Idem-modules/terraform-aws-cloudfront.git"
    version = "~> 5.0"

    aliases = ["cdn.example.com"]

    comment             = "My CloudFront Distribution"
    enabled             = true
    http_version        = "http2and3"
    is_ipv6_enabled     = true
    price_class         = "PriceClass_100"
    retain_on_delete    = false
    wait_for_deployment = true

    create_origin_access_control = true
    origin_access_control = {
      s3_oac = {
        description      = "CloudFront access to S3"
        origin_type      = "s3"
        signing_behavior = "always"
        signing_protocol = "sigv4"
      }
    }

    origin = {
      s3 = {
        domain_name = "my-bucket.s3.amazonaws.com"
        origin_id   = "s3-origin"
        
        s3_origin_config = {
          origin_access_control = "s3_oac"
        }
      }
    }

    default_cache_behavior = {
      target_origin_id           = "s3-origin"
      viewer_protocol_policy     = "redirect-to-https"
      allowed_methods            = ["GET", "HEAD", "OPTIONS"]
      cached_methods             = ["GET", "HEAD"]
      compress                   = true
      query_string               = true
      use_forwarded_values       = false
      
      # Using AWS managed cache policy
      cache_policy_id            = "658327ea-f89d-4fab-a63d-7e88639e58f6"  # CachingOptimized
      
      # Using AWS managed origin request policy
      origin_request_policy_id   = "88a5eaf4-2fd4-4709-b370-b4c650ea3fcf"  # CORS-S3Origin
      
      # Using AWS managed response headers policy
      response_headers_policy_id = "67f7725c-6f97-4210-82d7-5512b31e9d03"  # SecurityHeadersPolicy
    }

    viewer_certificate = {
      acm_certificate_arn = "arn:aws:acm:us-east-1:123456789012:certificate/..."
      ssl_support_method  = "sni-only"
      minimum_protocol_version = "TLSv1.2_2021"
    }
    
    # Web Application Firewall (WAF) association
    web_acl_id = aws_wafv2_web_acl.example.arn
    
    # Logging configuration
    logging_config = {
      bucket = "my-logs-bucket.s3.amazonaws.com"
      prefix = "cloudfront/"
    }

    tags = {
      Environment = "production"
      Terraform   = "true"
    }
  }
